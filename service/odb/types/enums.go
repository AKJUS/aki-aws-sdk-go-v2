// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type Access string

// Enum values for Access
const (
	AccessEnabled  Access = "ENABLED"
	AccessDisabled Access = "DISABLED"
)

// Values returns all known values for Access. Note that this can be expanded in
// the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Access) Values() []Access {
	return []Access{
		"ENABLED",
		"DISABLED",
	}
}

type ComputeModel string

// Enum values for ComputeModel
const (
	ComputeModelEcpu ComputeModel = "ECPU"
	ComputeModelOcpu ComputeModel = "OCPU"
)

// Values returns all known values for ComputeModel. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ComputeModel) Values() []ComputeModel {
	return []ComputeModel{
		"ECPU",
		"OCPU",
	}
}

type DayOfWeekName string

// Enum values for DayOfWeekName
const (
	DayOfWeekNameMonday    DayOfWeekName = "MONDAY"
	DayOfWeekNameTuesday   DayOfWeekName = "TUESDAY"
	DayOfWeekNameWednesday DayOfWeekName = "WEDNESDAY"
	DayOfWeekNameThursday  DayOfWeekName = "THURSDAY"
	DayOfWeekNameFriday    DayOfWeekName = "FRIDAY"
	DayOfWeekNameSaturday  DayOfWeekName = "SATURDAY"
	DayOfWeekNameSunday    DayOfWeekName = "SUNDAY"
)

// Values returns all known values for DayOfWeekName. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DayOfWeekName) Values() []DayOfWeekName {
	return []DayOfWeekName{
		"MONDAY",
		"TUESDAY",
		"WEDNESDAY",
		"THURSDAY",
		"FRIDAY",
		"SATURDAY",
		"SUNDAY",
	}
}

type DbNodeMaintenanceType string

// Enum values for DbNodeMaintenanceType
const (
	DbNodeMaintenanceTypeVmdbRebootMigration DbNodeMaintenanceType = "VMDB_REBOOT_MIGRATION"
)

// Values returns all known values for DbNodeMaintenanceType. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DbNodeMaintenanceType) Values() []DbNodeMaintenanceType {
	return []DbNodeMaintenanceType{
		"VMDB_REBOOT_MIGRATION",
	}
}

type DbNodeResourceStatus string

// Enum values for DbNodeResourceStatus
const (
	DbNodeResourceStatusAvailable    DbNodeResourceStatus = "AVAILABLE"
	DbNodeResourceStatusFailed       DbNodeResourceStatus = "FAILED"
	DbNodeResourceStatusProvisioning DbNodeResourceStatus = "PROVISIONING"
	DbNodeResourceStatusTerminated   DbNodeResourceStatus = "TERMINATED"
	DbNodeResourceStatusTerminating  DbNodeResourceStatus = "TERMINATING"
	DbNodeResourceStatusUpdating     DbNodeResourceStatus = "UPDATING"
	DbNodeResourceStatusStopping     DbNodeResourceStatus = "STOPPING"
	DbNodeResourceStatusStopped      DbNodeResourceStatus = "STOPPED"
	DbNodeResourceStatusStarting     DbNodeResourceStatus = "STARTING"
)

// Values returns all known values for DbNodeResourceStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DbNodeResourceStatus) Values() []DbNodeResourceStatus {
	return []DbNodeResourceStatus{
		"AVAILABLE",
		"FAILED",
		"PROVISIONING",
		"TERMINATED",
		"TERMINATING",
		"UPDATING",
		"STOPPING",
		"STOPPED",
		"STARTING",
	}
}

type DbServerPatchingStatus string

// Enum values for DbServerPatchingStatus
const (
	DbServerPatchingStatusComplete              DbServerPatchingStatus = "COMPLETE"
	DbServerPatchingStatusFailed                DbServerPatchingStatus = "FAILED"
	DbServerPatchingStatusMaintenanceInProgress DbServerPatchingStatus = "MAINTENANCE_IN_PROGRESS"
	DbServerPatchingStatusScheduled             DbServerPatchingStatus = "SCHEDULED"
)

// Values returns all known values for DbServerPatchingStatus. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DbServerPatchingStatus) Values() []DbServerPatchingStatus {
	return []DbServerPatchingStatus{
		"COMPLETE",
		"FAILED",
		"MAINTENANCE_IN_PROGRESS",
		"SCHEDULED",
	}
}

type DiskRedundancy string

// Enum values for DiskRedundancy
const (
	DiskRedundancyHigh   DiskRedundancy = "HIGH"
	DiskRedundancyNormal DiskRedundancy = "NORMAL"
)

// Values returns all known values for DiskRedundancy. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DiskRedundancy) Values() []DiskRedundancy {
	return []DiskRedundancy{
		"HIGH",
		"NORMAL",
	}
}

type IormLifecycleState string

// Enum values for IormLifecycleState
const (
	IormLifecycleStateBootstrapping IormLifecycleState = "BOOTSTRAPPING"
	IormLifecycleStateDisabled      IormLifecycleState = "DISABLED"
	IormLifecycleStateEnabled       IormLifecycleState = "ENABLED"
	IormLifecycleStateFailed        IormLifecycleState = "FAILED"
	IormLifecycleStateUpdating      IormLifecycleState = "UPDATING"
)

// Values returns all known values for IormLifecycleState. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (IormLifecycleState) Values() []IormLifecycleState {
	return []IormLifecycleState{
		"BOOTSTRAPPING",
		"DISABLED",
		"ENABLED",
		"FAILED",
		"UPDATING",
	}
}

type LicenseModel string

// Enum values for LicenseModel
const (
	LicenseModelBringYourOwnLicense LicenseModel = "BRING_YOUR_OWN_LICENSE"
	LicenseModelLicenseIncluded     LicenseModel = "LICENSE_INCLUDED"
)

// Values returns all known values for LicenseModel. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (LicenseModel) Values() []LicenseModel {
	return []LicenseModel{
		"BRING_YOUR_OWN_LICENSE",
		"LICENSE_INCLUDED",
	}
}

type ManagedResourceStatus string

// Enum values for ManagedResourceStatus
const (
	ManagedResourceStatusEnabled   ManagedResourceStatus = "ENABLED"
	ManagedResourceStatusEnabling  ManagedResourceStatus = "ENABLING"
	ManagedResourceStatusDisabled  ManagedResourceStatus = "DISABLED"
	ManagedResourceStatusDisabling ManagedResourceStatus = "DISABLING"
)

// Values returns all known values for ManagedResourceStatus. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ManagedResourceStatus) Values() []ManagedResourceStatus {
	return []ManagedResourceStatus{
		"ENABLED",
		"ENABLING",
		"DISABLED",
		"DISABLING",
	}
}

type MonthName string

// Enum values for MonthName
const (
	MonthNameJanuary   MonthName = "JANUARY"
	MonthNameFebruary  MonthName = "FEBRUARY"
	MonthNameMarch     MonthName = "MARCH"
	MonthNameApril     MonthName = "APRIL"
	MonthNameMay       MonthName = "MAY"
	MonthNameJune      MonthName = "JUNE"
	MonthNameJuly      MonthName = "JULY"
	MonthNameAugust    MonthName = "AUGUST"
	MonthNameSeptember MonthName = "SEPTEMBER"
	MonthNameOctober   MonthName = "OCTOBER"
	MonthNameNovember  MonthName = "NOVEMBER"
	MonthNameDecember  MonthName = "DECEMBER"
)

// Values returns all known values for MonthName. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MonthName) Values() []MonthName {
	return []MonthName{
		"JANUARY",
		"FEBRUARY",
		"MARCH",
		"APRIL",
		"MAY",
		"JUNE",
		"JULY",
		"AUGUST",
		"SEPTEMBER",
		"OCTOBER",
		"NOVEMBER",
		"DECEMBER",
	}
}

type Objective string

// Enum values for Objective
const (
	ObjectiveAuto           Objective = "AUTO"
	ObjectiveBalanced       Objective = "BALANCED"
	ObjectiveBasic          Objective = "BASIC"
	ObjectiveHighThroughput Objective = "HIGH_THROUGHPUT"
	ObjectiveLowLatency     Objective = "LOW_LATENCY"
)

// Values returns all known values for Objective. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Objective) Values() []Objective {
	return []Objective{
		"AUTO",
		"BALANCED",
		"BASIC",
		"HIGH_THROUGHPUT",
		"LOW_LATENCY",
	}
}

type OciOnboardingStatus string

// Enum values for OciOnboardingStatus
const (
	OciOnboardingStatusNotStarted             OciOnboardingStatus = "NOT_STARTED"
	OciOnboardingStatusPendingLinkGeneration  OciOnboardingStatus = "PENDING_LINK_GENERATION"
	OciOnboardingStatusPendingCustomerAction  OciOnboardingStatus = "PENDING_CUSTOMER_ACTION"
	OciOnboardingStatusPendingInitialization  OciOnboardingStatus = "PENDING_INITIALIZATION"
	OciOnboardingStatusActivating             OciOnboardingStatus = "ACTIVATING"
	OciOnboardingStatusActiveInHomeRegion     OciOnboardingStatus = "ACTIVE_IN_HOME_REGION"
	OciOnboardingStatusActive                 OciOnboardingStatus = "ACTIVE"
	OciOnboardingStatusActiveLimited          OciOnboardingStatus = "ACTIVE_LIMITED"
	OciOnboardingStatusFailed                 OciOnboardingStatus = "FAILED"
	OciOnboardingStatusPublicOfferUnsupported OciOnboardingStatus = "PUBLIC_OFFER_UNSUPPORTED"
	OciOnboardingStatusSuspended              OciOnboardingStatus = "SUSPENDED"
	OciOnboardingStatusCanceled               OciOnboardingStatus = "CANCELED"
)

// Values returns all known values for OciOnboardingStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (OciOnboardingStatus) Values() []OciOnboardingStatus {
	return []OciOnboardingStatus{
		"NOT_STARTED",
		"PENDING_LINK_GENERATION",
		"PENDING_CUSTOMER_ACTION",
		"PENDING_INITIALIZATION",
		"ACTIVATING",
		"ACTIVE_IN_HOME_REGION",
		"ACTIVE",
		"ACTIVE_LIMITED",
		"FAILED",
		"PUBLIC_OFFER_UNSUPPORTED",
		"SUSPENDED",
		"CANCELED",
	}
}

type PatchingModeType string

// Enum values for PatchingModeType
const (
	PatchingModeTypeRolling    PatchingModeType = "ROLLING"
	PatchingModeTypeNonrolling PatchingModeType = "NONROLLING"
)

// Values returns all known values for PatchingModeType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PatchingModeType) Values() []PatchingModeType {
	return []PatchingModeType{
		"ROLLING",
		"NONROLLING",
	}
}

type PreferenceType string

// Enum values for PreferenceType
const (
	PreferenceTypeNoPreference     PreferenceType = "NO_PREFERENCE"
	PreferenceTypeCustomPreference PreferenceType = "CUSTOM_PREFERENCE"
)

// Values returns all known values for PreferenceType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PreferenceType) Values() []PreferenceType {
	return []PreferenceType{
		"NO_PREFERENCE",
		"CUSTOM_PREFERENCE",
	}
}

type ResourceStatus string

// Enum values for ResourceStatus
const (
	ResourceStatusAvailable             ResourceStatus = "AVAILABLE"
	ResourceStatusFailed                ResourceStatus = "FAILED"
	ResourceStatusProvisioning          ResourceStatus = "PROVISIONING"
	ResourceStatusTerminated            ResourceStatus = "TERMINATED"
	ResourceStatusTerminating           ResourceStatus = "TERMINATING"
	ResourceStatusUpdating              ResourceStatus = "UPDATING"
	ResourceStatusMaintenanceInProgress ResourceStatus = "MAINTENANCE_IN_PROGRESS"
)

// Values returns all known values for ResourceStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ResourceStatus) Values() []ResourceStatus {
	return []ResourceStatus{
		"AVAILABLE",
		"FAILED",
		"PROVISIONING",
		"TERMINATED",
		"TERMINATING",
		"UPDATING",
		"MAINTENANCE_IN_PROGRESS",
	}
}

type ShapeType string

// Enum values for ShapeType
const (
	ShapeTypeAmd          ShapeType = "AMD"
	ShapeTypeIntel        ShapeType = "INTEL"
	ShapeTypeIntelFlexX9  ShapeType = "INTEL_FLEX_X9"
	ShapeTypeAmpereFlexA1 ShapeType = "AMPERE_FLEX_A1"
)

// Values returns all known values for ShapeType. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ShapeType) Values() []ShapeType {
	return []ShapeType{
		"AMD",
		"INTEL",
		"INTEL_FLEX_X9",
		"AMPERE_FLEX_A1",
	}
}

type ValidationExceptionReason string

// Enum values for ValidationExceptionReason
const (
	ValidationExceptionReasonUnknownOperation      ValidationExceptionReason = "unknownOperation"
	ValidationExceptionReasonCannotParse           ValidationExceptionReason = "cannotParse"
	ValidationExceptionReasonFieldValidationFailed ValidationExceptionReason = "fieldValidationFailed"
	ValidationExceptionReasonOther                 ValidationExceptionReason = "other"
)

// Values returns all known values for ValidationExceptionReason. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ValidationExceptionReason) Values() []ValidationExceptionReason {
	return []ValidationExceptionReason{
		"unknownOperation",
		"cannotParse",
		"fieldValidationFailed",
		"other",
	}
}

type VpcEndpointType string

// Enum values for VpcEndpointType
const (
	VpcEndpointTypeServicenetwork VpcEndpointType = "SERVICENETWORK"
)

// Values returns all known values for VpcEndpointType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (VpcEndpointType) Values() []VpcEndpointType {
	return []VpcEndpointType{
		"SERVICENETWORK",
	}
}
